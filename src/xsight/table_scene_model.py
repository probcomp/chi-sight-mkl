# AUTOGENERATED! DO NOT EDIT! File to edit: ../../notebooks/30 - Table Scene Model.ipynb.

# %% auto 0
__all__ = ['normal_logpdf', 'normal_pdf', 'truncnorm_logpdf', 'truncnorm_pdf', 'inv', 'logaddexp', 'logsumexp', 'key', 'prep_im',
           'make_table_scene_model']

# %% ../../notebooks/30 - Table Scene Model.ipynb 2
import bayes3d as b3d
import bayes3d.genjax
import joblib
from tqdm import tqdm
import os
import jax.numpy as jnp
import jax
import numpy as np
import genjax
import trimesh
import matplotlib.pyplot as plt
from bayes3d.genjax.genjax_distributions import *

# console = genjax.pretty(show_locals=False)

# %% ../../notebooks/30 - Table Scene Model.ipynb 3
from jax.scipy.spatial.transform import Rotation
from scipy.stats import truncnorm as scipy_truncnormal

normal_logpdf    = jax.scipy.stats.norm.logpdf
normal_pdf       = jax.scipy.stats.norm.pdf
truncnorm_logpdf = jax.scipy.stats.truncnorm.logpdf
truncnorm_pdf    = jax.scipy.stats.truncnorm.pdf

inv       = jnp.linalg.inv
logaddexp = jnp.logaddexp
logsumexp = jax.scipy.special.logsumexp

key = jax.random.PRNGKey(0)

# %% ../../notebooks/30 - Table Scene Model.ipynb 4
from .utils import keysplit
from .plotting import *

# %% ../../notebooks/30 - Table Scene Model.ipynb 12
def prep_im(Y, far=_far, eps=1e-6):
    im = np.where(Y[:,:,2]>= _far - eps, jnp.inf, Y[:,:,2])
    return im

# %% ../../notebooks/30 - Table Scene Model.ipynb 13
def make_table_scene_model():

    @genjax.gen
    def model(nums, 
              possible_object_indices, 
              pose_bounds, 
              contact_bounds, 
              all_box_dims):
        
        num_objects = len(nums) # this is a hack, otherwise genajx is complaining

        indices        = jnp.array([], dtype=jnp.int32)
        root_poses     = jnp.zeros((0,4,4))
        contact_params = jnp.zeros((0,3))
        faces_parents  = jnp.array([], dtype=jnp.int32)
        faces_child    = jnp.array([], dtype=jnp.int32)
        parents        = jnp.array([], dtype=jnp.int32)

        for i in range(3):

            index  = uniform_discrete(possible_object_indices)    @ f"id_{i}"
            pose   = uniform_pose(pose_bounds[0], pose_bounds[1]) @ f"root_pose_{i}"
            params = contact_params_uniform(contact_bounds[0], contact_bounds[1]) @ f"contact_params_{i}"

            parent_obj  = uniform_discrete(jnp.arange(-1, num_objects - 1)) @ f"parent_{i}"
            parent_face = uniform_discrete(jnp.arange(0,6)) @ f"face_parent_{i}"
            child_face  = uniform_discrete(jnp.arange(0,6)) @ f"face_child_{i}"

            indices        = jnp.concatenate([indices, jnp.array([index])])
            root_poses     = jnp.concatenate([root_poses, pose.reshape(1,4,4)])
            contact_params = jnp.concatenate([contact_params, params.reshape(1,-1)])
            parents        = jnp.concatenate([parents, jnp.array([parent_obj])])
            faces_parents  = jnp.concatenate([faces_parents, jnp.array([parent_face])])
            faces_child    = jnp.concatenate([faces_child, jnp.array([child_face])])
        

        scene = (root_poses, all_box_dims[indices], parents, contact_params, faces_parents, faces_child)
        poses = b.scene_graph.poses_from_scene_graph(*scene)

        camera_pose = uniform_pose(pose_bounds[0], pose_bounds[1]) @ f"camera_pose"

        return camera_pose, poses, indices

    return model
